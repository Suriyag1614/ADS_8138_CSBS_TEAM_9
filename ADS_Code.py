# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ckPODi6y5YhdautAeM8ELACIdCbwl0f8
"""

# Problem: Predicting the future price of a stock or financial asset accurately is a complex and challenging task due to various factors, including market dynamics, economic indicators, and investor sentiment.

# Objective: Develop a stock price prediction system that leverages historical data, market trends, and machine learning to provide accurate short-term and long-term stock price forecasts for a given companyâ€™s stock.

# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Load historical stock price data
data = pd.read_csv('MSFT.csv')

# Select the 'Close' price column as the target variable
data = data[['Date', 'Close']]

# Create a new column for the next day's closing price
data['Next Close'] = data['Close'].shift(-1)

# Drop the last row since there is no 'Next Close' for it
data = data[:-1]

# Split the data into features (X) and the target variable (y)
X = data[['Close']]
y = data['Next Close']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
random_state=42)

# Create and train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate the Mean Squared Error to evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Visualize the predictions
plt.scatter(X_test, y_test, color='b')
plt.plot(X_test, y_pred, color='r')
plt.xlabel('Closing Price')
plt.ylabel('Next Day Closing Price')
plt.title('Stock Price Prediction')
plt.show()

# Predict the stock price for a specific value
predicted_price = model.predict(np.array([[X_test.iloc[0][0]]]))
print(f'Predicted Price: {predicted_price[0]}')